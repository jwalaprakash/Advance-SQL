use test2;

##########################################-- example 1
-- Create a table
CREATE TABLE sales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(50),
    sale_date DATE,
    revenue DECIMAL(10, 2)
);

-- Insert some sample data
INSERT INTO sales (product_name, sale_date, revenue) VALUES
('Product A', '2023-11-01', 1000.00),
('Product B', '2023-11-02', 1500.00),
('Product A', '2023-11-03', 1200.00),
('Product B', '2023-11-04', 1800.00),
('Product A', '2023-11-05', 1100.00);

-- Query using LEAD function
SELECT 
    product_name,
    sale_date,
    revenue,
    LEAD(revenue, 1) OVER (ORDER BY sale_date) AS next_day_revenue,
     LAG(revenue, 1) OVER (ORDER BY sale_date) AS previous_day_revenue
FROM sales;


--####################################################   ex 2

-- Create a table
CREATE TABLE stock_prices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    stock_symbol VARCHAR(10),
    price_date DATE,
    closing_price DECIMAL(10, 2)
);

-- Insert sample data
INSERT INTO stock_prices (stock_symbol, price_date, closing_price) VALUES
('AAPL', '2023-11-01', 150.00),
('AAPL', '2023-11-02', 155.00),
('AAPL', '2023-11-03', 160.00),
('AAPL', '2023-11-04', 157.50),
('AAPL', '2023-11-05', 162.00);

-- Query using LAG and LEAD functions to analyze price changes
SELECT 
    stock_symbol,
    price_date,
    closing_price,
    LAG(closing_price, 1) OVER (PARTITION BY stock_symbol ORDER BY price_date) AS previous_day_price,
    LEAD(closing_price, 1) OVER (PARTITION BY stock_symbol ORDER BY price_date) AS next_day_price,
    (closing_price - LAG(closing_price, 1) OVER (PARTITION BY stock_symbol ORDER BY price_date)) AS price_change
FROM stock_prices
WHERE stock_symbol = 'AAPL';

