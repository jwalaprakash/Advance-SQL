use test;
-- 1st procedure
DELIMITER //
CREATE PROCEDURE GetCustomer(IN customerID INT)
BEGIN
  SELECT * FROM customers WHERE id = customerID;
END //
DELIMITER ;


##################################### Best example of stored procedure
--link  
https://chat.openai.com/share/f8acb3f6-dc3e-47f9-bcbf-ef538b8b1b2c

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255),
    price DECIMAL(10, 2)
);

CREATE TABLE price_change_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    old_price DECIMAL(10, 2),
    new_price DECIMAL(10, 2),
    price_change DECIMAL(10, 2),
    change_date DATETIME,
    FOREIGN KEY (product_id) REFERENCES products(id)
);

INSERT INTO products (product_name, price) VALUES ('Product A', 20.50);
INSERT INTO products (product_name, price) VALUES ('Product B', 30.00);
INSERT INTO products (product_name, price) VALUES ('Product C', 15.75);

DELIMITER //

CREATE PROCEDURE UpdateProductPrice(IN productID INT, IN newPrice DECIMAL(10, 2))
BEGIN
    DECLARE oldPrice DECIMAL(10, 2);
    DECLARE priceChange DECIMAL(10, 2);

    SELECT price INTO oldPrice FROM products WHERE id = productID;

    IF oldPrice IS NOT NULL THEN
        SET priceChange = newPrice - oldPrice;
        UPDATE products SET price = newPrice WHERE id = productID;
        INSERT INTO price_change_history(product_id, old_price, new_price, price_change, change_date)
        VALUES (productID, oldPrice, newPrice, priceChange, NOW());
        SELECT CONCAT('Price updated successfully. Price change: ', priceChange) AS Message;
    ELSE
        SELECT 'Product not found.' AS Message;
    END IF;
END //

DELIMITER ;

CALL UpdateProductPrice(2, 22.50);

select * from products;

select * from price_change_history


/*The provided script creates a stored procedure named UpdateProductPrice in MySQL. 
This procedure is designed to update the price of a product in the products table and 
track the price change in the price_change_history table. Here's a breakdown of the script:

The DELIMITER command changes the delimiter to // temporarily to allow for the definition of the stored procedure.

The CREATE PROCEDURE statement defines the stored procedure UpdateProductPrice with two parameters: productID (an integer) and newPrice (a decimal number).

Within the procedure, two local variables oldPrice and priceChange of decimal type are declared.

The SELECT statement retrieves the current price of the product with the provided productID from the products table and stores it in the oldPrice variable.

The IF statement checks whether the oldPrice is not NULL. If it's not NULL, 
the priceChange is calculated as the difference between the new price and the old price. 
The UPDATE statement updates the price of the product in the products table, and the 
INSERT statement adds a new entry to the price_change_history table.

Depending on the outcome of the operation, the SELECT statement is used to return a
 message indicating whether the price update was successful or whether the product was not found.

The final DELIMITER command changes the delimiter back to ;.

To execute this script, you can use any MySQL client or the MySQL command line.




User
what is price_change_history
ChatGPT
price_change_history appears to be a table in the database that is used to store historical 
changes in product prices. It likely tracks the modifications made to the prices of products 
over time. It is common for businesses to maintain such historical records to keep track of 
pricing trends and changes in the market. The price_change_history table seems to store information 
related to product price changes, such as the product ID, the old price, the new price, the price change, 
and the date of the change.




User
okay, then create both tables "products" and "price_change_history " insert rows into the products table 
and then implement the stored procedure. I want to see all the steps 
ChatGPT
Certainly, here is an example of how you can create the two tables, insert some rows into the products table,
and then execute the provided stored procedure:

sql
Copy code
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255),
    price DECIMAL(10, 2)
);

CREATE TABLE price_change_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    old_price DECIMAL(10, 2),
    new_price DECIMAL(10, 2),
    price_change DECIMAL(10, 2),
    change_date DATETIME,
    FOREIGN KEY (product_id) REFERENCES products(id)
);

INSERT INTO products (product_name, price) VALUES ('Product A', 20.50);
INSERT INTO products (product_name, price) VALUES ('Product B', 30.00);
INSERT INTO products (product_name, price) VALUES ('Product C', 15.75);
After creating the tables and inserting some rows into the products table, you can execute the stored procedure using the following command:

sql
Copy code
DELIMITER //

CREATE PROCEDURE UpdateProductPrice(IN productID INT, IN newPrice DECIMAL(10, 2))
BEGIN
    DECLARE oldPrice DECIMAL(10, 2);
    DECLARE priceChange DECIMAL(10, 2);

    SELECT price INTO oldPrice FROM products WHERE id = productID;

    IF oldPrice IS NOT NULL THEN
        SET priceChange = newPrice - oldPrice;
        UPDATE products SET price = newPrice WHERE id = productID;
        INSERT INTO price_change_history(product_id, old_price, new_price, price_change, change_date)
        VALUES (productID, oldPrice, newPrice, priceChange, NOW());
        SELECT CONCAT('Price updated successfully. Price change: ', priceChange) AS Message;
    ELSE
        SELECT 'Product not found.' AS Message;
    END IF;
END //

DELIMITER ;
You can then call the stored procedure using the following command:

sql
Copy code
CALL UpdateProductPrice(2, 22.50);
This will update the price of Product B to 22.50 and add a record of the price change in the price_change_history table. */



--##################################--- example SP
create database test2;
use test2;
CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    salary DECIMAL(10, 2),
    department VARCHAR(255)
);

INSERT INTO employees (name, salary, department) VALUES
    ('John Doe', 50000.00, 'HR'),
    ('Jane Smith', 60000.00, 'Sales'),
    ('Bob Johnson', 55000.00, 'Marketing');


DELIMITER //

CREATE PROCEDURE GetEmployeeDetails(IN employeeID INT, OUT employeeName VARCHAR(255), OUT employeeSalary DECIMAL(10,2), OUT employeeDepartment VARCHAR(255))
BEGIN
    DECLARE empName VARCHAR(255);
    DECLARE empSalary DECIMAL(10,2);
    DECLARE empDept VARCHAR(255);
    
    SELECT name, salary, department INTO empName, empSalary, empDept FROM employees WHERE id = employeeID;
    
    IF empName IS NOT NULL THEN
        SET employeeName = empName;
        SET employeeSalary = empSalary;
        SET employeeDepartment = empDept;
    ELSE
        SET employeeName = 'Not Found';
        SET employeeSalary = 0.0;
        SET employeeDepartment = 'N/A';
    END IF;
END //

DELIMITER ;

CALL GetEmployeeDetails(2, @employeeName, @employeeSalary, @employeeDepartment);
SELECT @employeeName, @employeeSalary, @employeeDepartment;
